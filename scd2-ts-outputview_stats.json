[
  {
    "__sql__": "SELECT * FROM default.prat_scd2_timestamp",
    "__bind_values__": [
      
    ],
    "__elt_snap_type__": [
      "ELT SCD2"
    ],
    "__pushdown_query_ctx__": {
      "selectPart": {
        "expressions": [
          {
            "expr": "*",
            "alias": null,
            "function": false
          }
        ]
      },
      "distinctPart": null,
      "fromPart": {
        "exprOrTable": "default.prat_scd2_timestamp",
        "alias": null,
        "expression": false
      },
      "wherePart": null,
      "groupByPart": null,
      "havingPart": null,
      "qualifyPart": null,
      "samplePart": null,
      "limitPart": null,
      "topPart": null,
      "offsetPart": null,
      "orderByPart": null
    },
    "__statistic__": {
      "totalNumberOfInserts": 2,
      "totalNumberOfDeletes": 0,
      "totalNumberOfUpdates": 1,
      "totalNumberOfSourceRows": 3,
      "snapStatus": "DONE",
      "queriesStatistic": [
        {
          "numberOfInserts": 0,
          "numberOfDeletes": 0,
          "numberOfUpdates": 0,
          "numberOfSourceRows": 0,
          "query": "CREATE TABLE IF NOT EXISTS default.tmp_80a0ab67_59e0_4950_ac7b_48b64f064832 USING DELTA AS SELECT * FROM ( /* 51017e63-c80e-4475-b984-f2dad77b1b3d */ select * from prat_scd2src ) white_duck58714"
        },
        {
          "numberOfInserts": 2,
          "numberOfDeletes": 0,
          "numberOfUpdates": 1,
          "numberOfSourceRows": 3,
          "query": "MERGE INTO default.prat_scd2_timestamp lime_snail78247 USING (SELECT * FROM (SELECT ROW_NUMBER() OVER (PARTITION BY src.customer_id ORDER BY src.START_DATE ASC NULLS LAST, src.address ASC NULLS FIRST) AS rownum, -1 AS cntstar, CAST (src.START_DATE AS timestamp) AS newrow_start_date, CAST (src.customer_id AS int) AS mergeKey1, src.*, lime_snail78247.START_DATE AS currentrow_start_date, 'MERGEINTO UPDATE' AS operation_type FROM (SELECT src.*, CAST (src.START_DATE AS timestamp) AS Snaplogic_staged_startdate, CAST (null AS string) AS L1, CAST (null AS int) AS previous_natkey1, CAST (null AS timestamp) AS previousrow_start_date, CAST (null AS int) AS rownum_before_join FROM default.tmp_80a0ab67_59e0_4950_ac7b_48b64f064832 src) src LEFT JOIN default.tmp_b197e816_8656_4733_9af4_929d60c4acbf lime_snail78247 ON ((src.customer_id IS NULL AND lime_snail78247.CUSTOMER_ID IS NULL) OR (src.customer_id = lime_snail78247.CUSTOMER_ID)) AND ((CASE WHEN (src.address IS NULL AND lime_snail78247.ADDRESS IS NULL) THEN 0 WHEN src.address = lime_snail78247.ADDRESS THEN 0 ELSE 1 END) = 1) WHERE lime_snail78247.NOT_NULLABLE IS NOT NULL AND src.START_DATE > lime_snail78247.START_DATE) src WHERE ROWNUM = 1 UNION ALL SELECT ROW_NUMBER() OVER (PARTITION BY src.customer_id ORDER BY src.START_DATE ASC NULLS LAST, src.address ASC NULLS FIRST) AS rownum, COUNT(*) OVER (PARTITION BY src.customer_id ORDER BY src.START_DATE ASC NULLS LAST, src.address ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS cntstar, CAST (LEAD(src.START_DATE) OVER (PARTITION BY src.customer_id ORDER BY src.START_DATE ASC NULLS LAST, src.address ASC NULLS FIRST) AS timestamp) AS newrow_start_date, CAST (src.customer_id AS int) AS mergeKey1, src.*, lime_snail78247.START_DATE AS currentrow_start_date, 'MERGEINTO INSERT' AS operation_type FROM (SELECT src.*, CAST (src.START_DATE AS timestamp) AS Snaplogic_staged_startdate, CAST (LAG(src.address) OVER (PARTITION BY src.customer_id ORDER BY src.START_DATE ASC NULLS LAST, src.address ASC NULLS FIRST) AS string) AS L1, CAST (null AS int) AS previous_natkey1, CAST (LAG(src.START_DATE) OVER (PARTITION BY src.customer_id ORDER BY src.START_DATE ASC NULLS LAST, src.address ASC NULLS FIRST) AS timestamp) AS previousrow_start_date, ROW_NUMBER() OVER (PARTITION BY src.customer_id ORDER BY src.START_DATE ASC NULLS LAST, src.address ASC NULLS FIRST) AS rownum_before_join FROM default.tmp_80a0ab67_59e0_4950_ac7b_48b64f064832 src WHERE src.START_DATE IS NOT NULL) src LEFT JOIN (SELECT 'NNC' AS NOT_NULLABLE, * FROM default.prat_scd2_timestamp WHERE CURRENT_ROW = CAST ('Y' AS string) AND START_DATE IS NOT NULL) lime_snail78247 ON ((src.customer_id IS NULL AND lime_snail78247.CUSTOMER_ID IS NULL) OR (src.customer_id = lime_snail78247.CUSTOMER_ID)) WHERE (lime_snail78247.NOT_NULLABLE IS NOT NULL AND (CASE WHEN src.START_DATE IS NULL THEN 0 WHEN src.START_DATE <= lime_snail78247.START_DATE THEN 0 WHEN src.rownum_before_join = 1 AND (CASE WHEN src.address IS NULL AND lime_snail78247.ADDRESS IS NULL THEN 0 WHEN src.address = lime_snail78247.ADDRESS THEN 0 ELSE 1 END) = 1 THEN 1 WHEN (src.previousrow_start_date IS NULL OR src.previousrow_start_date <= lime_snail78247.START_DATE) AND (CASE WHEN src.address IS NULL AND lime_snail78247.ADDRESS IS NULL THEN 0 WHEN src.address = lime_snail78247.ADDRESS THEN 0 ELSE 1 END) = 1 THEN 1 WHEN (CASE WHEN src.ADDRESS IS NULL AND src.L1 IS NULL THEN 0 WHEN src.ADDRESS = src.L1 THEN 0 WHEN (src.previousrow_start_date IS NULL OR src.previousrow_start_date <= lime_snail78247.START_DATE) THEN 0 ELSE 1 END = 1) THEN 1 ELSE 0 END) = 1) OR (lime_snail78247.NOT_NULLABLE IS NULL AND (CASE WHEN src.START_DATE IS NULL THEN 0 WHEN src.previousrow_start_date IS NULL AND src.rownum_before_join = 1 THEN 1 WHEN src.previousrow_start_date IS NOT NULL AND src.previousrow_start_date = src.START_DATE THEN 0 WHEN src.L1 IS NULL AND src.rownum_before_join = 1 THEN 1 WHEN src.L1 IS NULL AND src.address IS NULL THEN 0 WHEN src.address = src.L1 THEN 0 ELSE 1 END) = 1)) Snaplogic_staged_updates ON ((lime_snail78247.CUSTOMER_ID IS NULL AND mergeKey1 IS NULL) OR (lime_snail78247.CUSTOMER_ID = mergeKey1)) AND (operation_type = 'MERGEINTO UPDATE') WHEN MATCHED AND lime_snail78247.CURRENT_ROW = 'Y' THEN UPDATE SET CURRENT_ROW = CASE WHEN Snaplogic_staged_updates.newrow_start_date IS NULL THEN CAST ('Y' AS string) WHEN Snaplogic_staged_updates.newrow_start_date >= Snaplogic_staged_updates.currentrow_start_date THEN CAST ('N' AS string) ELSE lime_snail78247.CURRENT_ROW END, END_DATE = CASE WHEN Snaplogic_staged_updates.newrow_start_date IS NULL THEN lime_snail78247.END_DATE WHEN CAST (Snaplogic_staged_updates.newrow_start_date AS timestamp) >= Snaplogic_staged_updates.currentrow_start_date THEN Snaplogic_staged_updates.newrow_start_date ELSE lime_snail78247.END_DATE END, INVALID_FLAG = CASE WHEN Snaplogic_staged_updates.newrow_start_date IS NULL THEN CAST (TRUE AS boolean) WHEN Snaplogic_staged_updates.newrow_start_date >= Snaplogic_staged_updates.currentrow_start_date THEN CAST (null AS boolean) ELSE CAST (TRUE AS boolean) END WHEN NOT MATCHED THEN INSERT(CUSTOMER_ID, ADDRESS, END_DATE, START_DATE, CURRENT_ROW, INVALID_FLAG, ZIP, NOTES, SURNAME, PHONE, BUIL_DOUBLE, APP_INT, NAME) VALUES(Snaplogic_staged_updates.customer_id, Snaplogic_staged_updates.address, CASE WHEN Snaplogic_staged_updates.Snaplogic_staged_startdate IS NULL THEN CAST ('1900-01-01' AS timestamp) WHEN Snaplogic_staged_updates.currentrow_start_date IS NOT NULL AND Snaplogic_staged_updates.Snaplogic_staged_startdate <= Snaplogic_staged_updates.currentrow_start_date THEN CAST ('1900-01-01' AS timestamp) WHEN Snaplogic_staged_updates.newrow_start_date IS NOT NULL AND Snaplogic_staged_updates.newrow_start_date > Snaplogic_staged_updates.Snaplogic_staged_startdate THEN CAST (Snaplogic_staged_updates.newrow_start_date AS timestamp) WHEN Snaplogic_staged_updates.newrow_start_date IS NULL THEN CAST ('9999-12-12' AS timestamp) ELSE CAST ('1900-01-01' AS timestamp) END, CAST (Snaplogic_staged_updates.Snaplogic_staged_startdate AS timestamp), CASE WHEN Snaplogic_staged_updates.Snaplogic_staged_startdate IS NULL THEN CAST ('N' AS string) WHEN Snaplogic_staged_updates.currentrow_start_date IS NOT NULL AND Snaplogic_staged_updates.Snaplogic_staged_startdate <= Snaplogic_staged_updates.currentrow_start_date THEN CAST ('N' AS string) WHEN Snaplogic_staged_updates.newrow_start_date IS NOT NULL AND Snaplogic_staged_updates.newrow_start_date <= Snaplogic_staged_updates.Snaplogic_staged_startdate THEN CAST ('N' AS string) WHEN ((Snaplogic_staged_updates.newrow_start_date IS NOT NULL AND Snaplogic_staged_updates.newrow_start_date > Snaplogic_staged_updates.Snaplogic_staged_startdate) OR (Snaplogic_staged_updates.newrow_start_date IS NULL)) AND Snaplogic_staged_updates.rownum = Snaplogic_staged_updates.cntstar THEN CAST ('Y' AS string) ELSE CAST ('N' AS string) END, CASE WHEN Snaplogic_staged_updates.Snaplogic_staged_startdate IS NULL THEN CAST (TRUE AS boolean) WHEN Snaplogic_staged_updates.currentrow_start_date IS NOT NULL AND Snaplogic_staged_updates.Snaplogic_staged_startdate <= Snaplogic_staged_updates.currentrow_start_date THEN CAST (TRUE AS boolean) WHEN Snaplogic_staged_updates.newrow_start_date IS NOT NULL AND Snaplogic_staged_updates.newrow_start_date <= Snaplogic_staged_updates.Snaplogic_staged_startdate THEN CAST (TRUE AS boolean) WHEN Snaplogic_staged_updates.newrow_start_date IS NOT NULL AND Snaplogic_staged_updates.newrow_start_date > Snaplogic_staged_updates.Snaplogic_staged_startdate THEN CAST (null AS boolean) WHEN Snaplogic_staged_updates.newrow_start_date IS NULL THEN CAST (null AS boolean) ELSE CAST (TRUE AS boolean) END, CAST (Snaplogic_staged_updates.ZIP AS string), CAST (Snaplogic_staged_updates.NOTES AS string), CAST (Snaplogic_staged_updates.SURNAME AS string), CAST (Snaplogic_staged_updates.PHONE AS string), CAST (Snaplogic_staged_updates.BUIL_DOUBLE AS float), CAST (Snaplogic_staged_updates.APP_INT AS int), CAST (Snaplogic_staged_updates.NAME AS string));"
        }
      ]
    }
  }
]
